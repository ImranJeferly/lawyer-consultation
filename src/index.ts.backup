// Entry point for the backend application
import dotenv from 'dotenv';
import app, { httpServer } from './app';

// Load environment variables
dotenv.config();

// Import routes
import authRoutes from './routes/auth.routes';
import userRoutes from './routes/user.routes';
import lawyerRoutes from './routes/lawyer.routes';
import adminRoutes from './routes/admin.routes';
// import bookingRoutes from './routes/booking.routes';
import paymentRoutes from './routes/payment.routes';
import payoutRoutes from './routes/payout.routes';
import communicationsRoutes from './routes/communications.routes.simple';
// import notificationsRoutes from './routes/notifications.routes';
// import documentsRoutes from './routes/documents.routes';
import searchRoutes from './routes/search.routes';
import discoveryRoutes from './routes/discovery.routes';

// Import WebSocket manager
import webSocketManager from './services/websocketManager.service';

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: "*", // Configure this properly for production
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));

// Add before your other middleware
app.use('/api/auth/webhook', express.raw({ type: 'application/json' }));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/mfa', require('./routes/mfa.routes').default);
app.use('/api/users', userRoutes);
app.use('/api/lawyers', lawyerRoutes);
app.use('/api/admin', adminRoutes);
// app.use('/api/bookings', bookingRoutes);
app.use('/api/payments', paymentRoutes);
app.use('/api/payouts', payoutRoutes);
app.use('/api/communications', communicationsRoutes);
// app.use('/api/notifications', notificationsRoutes);
// app.use('/api/documents', documentsRoutes);
app.use('/api/search', searchRoutes);
app.use('/api/discovery', discoveryRoutes);

// Initialize WebSocket Manager for real-time communication
webSocketManager.initialize(io);

// Error handling middleware
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ 
    message: 'Something went wrong!',
    error: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// 404 handler - catch all unmatched routes
app.use((req, res) => {
  res.status(404).json({ 
    message: 'Route not found',
    path: req.originalUrl,
    method: req.method
  });
});

const PORT = process.env.PORT || 3000;

httpServer.listen(PORT, () => {
  console.log(`ðŸš€ Server running on port ${PORT}`);
  console.log(`ðŸ“Š Health check: http://localhost:${PORT}/health`);
});